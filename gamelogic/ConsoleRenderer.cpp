#include "ConsoleRenderer.h"


    void ConsoleRenderer::printField(Map& field) { // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ drawField –≤ printField
        // –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Å–∏ X
        std::cout << " "; // –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        for (int j = 0; j < field.SizeWidht(); ++j) { // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –¥–ª—è –Ω—É–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            std::cout << " " << j << " "; // –ü–µ—á–∞—Ç–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
        }
        std::cout << std::endl; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É

        // –ü–µ—á–∞—Ç–∞–µ–º –∫–∞—Ä—Ç—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫ –ø–æ –æ—Å–∏ Y
        for (int i = 0; i < field.SizeHeight(); ++i) { // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –¥–ª—è –Ω—É–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            std::cout << i << " "; // –ü–µ—á–∞—Ç–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏

            for (int j = 0; j < field.SizeWidht(); ++j) { // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –¥–ª—è –Ω—É–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                Cell& cell = field.GetCell(j, i);
                if (cell.GetState() == Cell::MapCells::unknown) {
                    std::cout << "üü¶ "; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–µ—Ç–∫–∞
                } else if (cell.GetState() == Cell::MapCells::ship) {
                    Ship* ship = cell.GetShipAdress(); // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—Ä–∞–±–ª—è
                    if (ship != nullptr) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ –Ω—É–ª–µ–≤–æ–π
                        switch (ship->GetSegmentState(cell.GetSegmentIndex())) {
                            case Ship::ShipSegmentState::Damaged:
                                std::cout << "‚≠ïÔ∏è "; // –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
                                break;
                            case Ship::ShipSegmentState::Destroyed:
                                std::cout << "‚ùå "; // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
                                break;
                            case Ship::ShipSegmentState::Full:
                                std::cout << "üö¢ "; // –¶–µ–ª—ã–π —Å–µ–≥–º–µ–Ω—Ç
                                break;
                            default:
                                std::cout << "‚ùì "; // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
                                break;
                        }
                    } else {
                        std::cout << "‚ùé "; // –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–æ—Ä–∞–±–ª—å –Ω—É–ª–µ–≤–æ–π
                    }
                } else if (cell.GetState() == Cell::MapCells::empty) {
                    std::cout << "‚¨úÔ∏è "; // –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
                }
            }
            std::cout << std::endl; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        }
    }

    void ConsoleRenderer::printMessage(const std::string& message) {
        std::cout << message << std::endl;
    }
